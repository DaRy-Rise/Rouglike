//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controllers: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controllers"",
    ""maps"": [
        {
            ""name"": ""Basic"",
            ""id"": ""fc520f55-e21d-4a81-a364-1e01c63ffa01"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bc1c79fe-4c86-4852-afad-24d86ec7fcea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""488ced31-c6a5-4158-be94-c44158f6f2d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0bc2bea-37e9-4949-a084-ce00de9ee56e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b43c6087-48cd-4107-848e-45437a5ab346"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4545c361-418d-4acb-84ca-1a59dddf3e91"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3f591457-c017-4cb2-a42c-e445ddb089d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""687ee952-36ad-4eb4-8056-3772f31bf4e2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c2fbd35d-81d8-4dbf-85e3-0a186755685a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""67274e53-70f4-4171-b0dd-7422909988f0"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bb4655c-4454-4e37-a561-eaa11b419c9d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ability"",
            ""id"": ""6edb9167-5fd5-4783-a7b7-5f36ad58a72d"",
            ""actions"": [
                {
                    ""name"": ""MoveAbility"",
                    ""type"": ""Button"",
                    ""id"": ""36b2fc67-3fbd-467c-9588-b70708eaf198"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UltaAbility"",
                    ""type"": ""Button"",
                    ""id"": ""1149fdd5-98ce-4d84-9fc1-e598af45ad18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AreaAbility"",
                    ""type"": ""Button"",
                    ""id"": ""93092dc3-c015-44a3-b9a0-ea1663100c4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2bb73c27-b4d3-429d-8e71-fa2d16562a7d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MoveAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c3fff4a-c495-4686-bf9c-756c1c7d2208"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UltaAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d36046b6-2ab5-47d6-9d79-0544a36eac6f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AreaAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Buttons"",
            ""id"": ""af88bb12-3b18-4747-af65-e8bfd4601c12"",
            ""actions"": [
                {
                    ""name"": ""VerticalChoosingUp"",
                    ""type"": ""Button"",
                    ""id"": ""85779873-cb04-4813-838f-093a05f48a72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VerticalChoosingDown"",
                    ""type"": ""Button"",
                    ""id"": ""808229d9-150e-4524-99ea-9737a8819ff1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorizontChoosingUp"",
                    ""type"": ""Button"",
                    ""id"": ""243678df-36af-428f-b57d-8b4e3e752e21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorizontChoosingDown"",
                    ""type"": ""Button"",
                    ""id"": ""b6655219-4cee-4298-9f27-3fedd043d758"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Choose"",
                    ""type"": ""Button"",
                    ""id"": ""41090f4e-610f-4efe-898e-4fbcc685b41b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""5407db6a-275c-4e1e-93d3-5f192ac1c2d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47660fe4-a45c-49ad-886b-7437dbfa35f8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalChoosingUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc172968-de0f-442f-b865-fa9dbb4abc0c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontChoosingUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""523e89cf-8f5a-4e42-b072-4ffef3322c16"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalChoosingDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23acc5ca-ba68-458f-99ad-ec4ca32323ca"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontChoosingDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8114d5f9-d6c2-4f5b-b8ef-89695c7fc82f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3593c11-f43b-439e-87b3-65e4f7cb8c68"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Basic
        m_Basic = asset.FindActionMap("Basic", throwIfNotFound: true);
        m_Basic_Move = m_Basic.FindAction("Move", throwIfNotFound: true);
        m_Basic_Attack = m_Basic.FindAction("Attack", throwIfNotFound: true);
        // Ability
        m_Ability = asset.FindActionMap("Ability", throwIfNotFound: true);
        m_Ability_MoveAbility = m_Ability.FindAction("MoveAbility", throwIfNotFound: true);
        m_Ability_UltaAbility = m_Ability.FindAction("UltaAbility", throwIfNotFound: true);
        m_Ability_AreaAbility = m_Ability.FindAction("AreaAbility", throwIfNotFound: true);
        // Buttons
        m_Buttons = asset.FindActionMap("Buttons", throwIfNotFound: true);
        m_Buttons_VerticalChoosingUp = m_Buttons.FindAction("VerticalChoosingUp", throwIfNotFound: true);
        m_Buttons_VerticalChoosingDown = m_Buttons.FindAction("VerticalChoosingDown", throwIfNotFound: true);
        m_Buttons_HorizontChoosingUp = m_Buttons.FindAction("HorizontChoosingUp", throwIfNotFound: true);
        m_Buttons_HorizontChoosingDown = m_Buttons.FindAction("HorizontChoosingDown", throwIfNotFound: true);
        m_Buttons_Choose = m_Buttons.FindAction("Choose", throwIfNotFound: true);
        m_Buttons_Exit = m_Buttons.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Basic
    private readonly InputActionMap m_Basic;
    private List<IBasicActions> m_BasicActionsCallbackInterfaces = new List<IBasicActions>();
    private readonly InputAction m_Basic_Move;
    private readonly InputAction m_Basic_Attack;
    public struct BasicActions
    {
        private @Controllers m_Wrapper;
        public BasicActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Basic_Move;
        public InputAction @Attack => m_Wrapper.m_Basic_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Basic; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasicActions set) { return set.Get(); }
        public void AddCallbacks(IBasicActions instance)
        {
            if (instance == null || m_Wrapper.m_BasicActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasicActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
        }

        private void UnregisterCallbacks(IBasicActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
        }

        public void RemoveCallbacks(IBasicActions instance)
        {
            if (m_Wrapper.m_BasicActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasicActions instance)
        {
            foreach (var item in m_Wrapper.m_BasicActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasicActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasicActions @Basic => new BasicActions(this);

    // Ability
    private readonly InputActionMap m_Ability;
    private List<IAbilityActions> m_AbilityActionsCallbackInterfaces = new List<IAbilityActions>();
    private readonly InputAction m_Ability_MoveAbility;
    private readonly InputAction m_Ability_UltaAbility;
    private readonly InputAction m_Ability_AreaAbility;
    public struct AbilityActions
    {
        private @Controllers m_Wrapper;
        public AbilityActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAbility => m_Wrapper.m_Ability_MoveAbility;
        public InputAction @UltaAbility => m_Wrapper.m_Ability_UltaAbility;
        public InputAction @AreaAbility => m_Wrapper.m_Ability_AreaAbility;
        public InputActionMap Get() { return m_Wrapper.m_Ability; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbilityActions set) { return set.Get(); }
        public void AddCallbacks(IAbilityActions instance)
        {
            if (instance == null || m_Wrapper.m_AbilityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AbilityActionsCallbackInterfaces.Add(instance);
            @MoveAbility.started += instance.OnMoveAbility;
            @MoveAbility.performed += instance.OnMoveAbility;
            @MoveAbility.canceled += instance.OnMoveAbility;
            @UltaAbility.started += instance.OnUltaAbility;
            @UltaAbility.performed += instance.OnUltaAbility;
            @UltaAbility.canceled += instance.OnUltaAbility;
            @AreaAbility.started += instance.OnAreaAbility;
            @AreaAbility.performed += instance.OnAreaAbility;
            @AreaAbility.canceled += instance.OnAreaAbility;
        }

        private void UnregisterCallbacks(IAbilityActions instance)
        {
            @MoveAbility.started -= instance.OnMoveAbility;
            @MoveAbility.performed -= instance.OnMoveAbility;
            @MoveAbility.canceled -= instance.OnMoveAbility;
            @UltaAbility.started -= instance.OnUltaAbility;
            @UltaAbility.performed -= instance.OnUltaAbility;
            @UltaAbility.canceled -= instance.OnUltaAbility;
            @AreaAbility.started -= instance.OnAreaAbility;
            @AreaAbility.performed -= instance.OnAreaAbility;
            @AreaAbility.canceled -= instance.OnAreaAbility;
        }

        public void RemoveCallbacks(IAbilityActions instance)
        {
            if (m_Wrapper.m_AbilityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAbilityActions instance)
        {
            foreach (var item in m_Wrapper.m_AbilityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AbilityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AbilityActions @Ability => new AbilityActions(this);

    // Buttons
    private readonly InputActionMap m_Buttons;
    private List<IButtonsActions> m_ButtonsActionsCallbackInterfaces = new List<IButtonsActions>();
    private readonly InputAction m_Buttons_VerticalChoosingUp;
    private readonly InputAction m_Buttons_VerticalChoosingDown;
    private readonly InputAction m_Buttons_HorizontChoosingUp;
    private readonly InputAction m_Buttons_HorizontChoosingDown;
    private readonly InputAction m_Buttons_Choose;
    private readonly InputAction m_Buttons_Exit;
    public struct ButtonsActions
    {
        private @Controllers m_Wrapper;
        public ButtonsActions(@Controllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalChoosingUp => m_Wrapper.m_Buttons_VerticalChoosingUp;
        public InputAction @VerticalChoosingDown => m_Wrapper.m_Buttons_VerticalChoosingDown;
        public InputAction @HorizontChoosingUp => m_Wrapper.m_Buttons_HorizontChoosingUp;
        public InputAction @HorizontChoosingDown => m_Wrapper.m_Buttons_HorizontChoosingDown;
        public InputAction @Choose => m_Wrapper.m_Buttons_Choose;
        public InputAction @Exit => m_Wrapper.m_Buttons_Exit;
        public InputActionMap Get() { return m_Wrapper.m_Buttons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonsActions set) { return set.Get(); }
        public void AddCallbacks(IButtonsActions instance)
        {
            if (instance == null || m_Wrapper.m_ButtonsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ButtonsActionsCallbackInterfaces.Add(instance);
            @VerticalChoosingUp.started += instance.OnVerticalChoosingUp;
            @VerticalChoosingUp.performed += instance.OnVerticalChoosingUp;
            @VerticalChoosingUp.canceled += instance.OnVerticalChoosingUp;
            @VerticalChoosingDown.started += instance.OnVerticalChoosingDown;
            @VerticalChoosingDown.performed += instance.OnVerticalChoosingDown;
            @VerticalChoosingDown.canceled += instance.OnVerticalChoosingDown;
            @HorizontChoosingUp.started += instance.OnHorizontChoosingUp;
            @HorizontChoosingUp.performed += instance.OnHorizontChoosingUp;
            @HorizontChoosingUp.canceled += instance.OnHorizontChoosingUp;
            @HorizontChoosingDown.started += instance.OnHorizontChoosingDown;
            @HorizontChoosingDown.performed += instance.OnHorizontChoosingDown;
            @HorizontChoosingDown.canceled += instance.OnHorizontChoosingDown;
            @Choose.started += instance.OnChoose;
            @Choose.performed += instance.OnChoose;
            @Choose.canceled += instance.OnChoose;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IButtonsActions instance)
        {
            @VerticalChoosingUp.started -= instance.OnVerticalChoosingUp;
            @VerticalChoosingUp.performed -= instance.OnVerticalChoosingUp;
            @VerticalChoosingUp.canceled -= instance.OnVerticalChoosingUp;
            @VerticalChoosingDown.started -= instance.OnVerticalChoosingDown;
            @VerticalChoosingDown.performed -= instance.OnVerticalChoosingDown;
            @VerticalChoosingDown.canceled -= instance.OnVerticalChoosingDown;
            @HorizontChoosingUp.started -= instance.OnHorizontChoosingUp;
            @HorizontChoosingUp.performed -= instance.OnHorizontChoosingUp;
            @HorizontChoosingUp.canceled -= instance.OnHorizontChoosingUp;
            @HorizontChoosingDown.started -= instance.OnHorizontChoosingDown;
            @HorizontChoosingDown.performed -= instance.OnHorizontChoosingDown;
            @HorizontChoosingDown.canceled -= instance.OnHorizontChoosingDown;
            @Choose.started -= instance.OnChoose;
            @Choose.performed -= instance.OnChoose;
            @Choose.canceled -= instance.OnChoose;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IButtonsActions instance)
        {
            if (m_Wrapper.m_ButtonsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IButtonsActions instance)
        {
            foreach (var item in m_Wrapper.m_ButtonsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ButtonsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ButtonsActions @Buttons => new ButtonsActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IBasicActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IAbilityActions
    {
        void OnMoveAbility(InputAction.CallbackContext context);
        void OnUltaAbility(InputAction.CallbackContext context);
        void OnAreaAbility(InputAction.CallbackContext context);
    }
    public interface IButtonsActions
    {
        void OnVerticalChoosingUp(InputAction.CallbackContext context);
        void OnVerticalChoosingDown(InputAction.CallbackContext context);
        void OnHorizontChoosingUp(InputAction.CallbackContext context);
        void OnHorizontChoosingDown(InputAction.CallbackContext context);
        void OnChoose(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
